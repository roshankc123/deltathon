# -*- coding: utf-8 -*-
"""Monitoring.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_PaJHbTHKt-fwPgXVvKRsBn9B3TPPvta
"""

import pandas as pd
df = pd.read_csv('https://raw.githubusercontent.com/roshankc123/deltathon/main/crop_recommendation/crop.csv')

# df.describe()

# df.columns

df.drop(['ph', 'Unnamed: 0'], axis=1, inplace=True)

# df

# df.groupby(by='label').get_group('rice')['N'].min(), df.groupby(by='label').get_group('rice')['N'].max()

# df.groupby(by='label').get_group('rice').describe()

# a= {'N':0,
# 'P':1,
# 'K':2,               
# 'temperature':3,     
# 'humidity':4,                      
# 'rainfall':5}

# param = ['N',
# 'P',
# 'K',               
# 'temperature',     
# 'humidity',                      
# 'rainfall']

def monitor(plant):
  min = df.groupby(by='label').get_group(plant).describe().loc['std']
  max = df.groupby(by='label').get_group(plant).describe().loc['mean']
  return (max-min, max+min)

def mon_plant(plant):
  df = pd.read_csv('https://raw.githubusercontent.com/roshankc123/deltathon/main/crop_recommendation/crop.csv')
  df.drop(['ph', 'Unnamed: 0'], axis=1, inplace=True)
#   print(f'df:{df}')
  mean = df.groupby(by='label').get_group(plant).describe().loc['mean']
#   print(mean)

# mon_plant('rice')

# data = [[90,42,43,20.87974371,82.00274423,6.502985292000001],
# [85,58,41,21.77046169,80.31964408,7.038096361],
# [60,55,44,23.00445915,82.3207629,7.840207144],
# [74,35,40,26.49109635,80.15836264,6.980400905],
# [78,42,42,20.13017482,81.60487287,7.628472891],
# [69,37,42,23.05804872,83.37011772,7.073453503],
# [69,55,38,22.70883798,82.63941394,5.70080568],
# [94,53,40,20.27774362,82.89408619,5.718627177999999]]

# data

import pandas as pd
# df = pd.DataFrame(data)

# df

# a = df.describe().mean()
# b= []

# for i in range(len(a)):
#   b.append(a[i])

def data_read(data):
  df = pd.DataFrame(data)
  print(df.columns)
  df.drop(6,axis=1, inplace=True)
  a = df.describe().mean()
  b= []
  for i in range(len(a)):
    b.append(a[i])
  return b



def final_mod(data, crop):
  param = ['N','P','K','temperature','humidity', 'rainfall']
  crop_standard_min, crop_standard_max = monitor(crop)
  data_taken = data_read(data)
  # df = pd.DataFrame(zip(crop_standard, data_taken))
  org_min, org_max, det_avg = (crop_standard_min.values,crop_standard_max.values, data_taken)
  df = pd.DataFrame(zip(org_min, org_max, det_avg))
  df['dev'] = (det_avg - org_min) / (org_max - org_min) *100
  for each in df.dev:
    if abs(each) > 10 :
      df['by'] = 'Need To monitor'
    else:
      df['by'] = 'Good to go'
  df_final = pd.concat([df['by']], axis=1)
  df_final['para'] = param
  df_final.set_index('para', inplace=True)
  df = df_final.to_json()
  return df

# ddd =final_mod(data, 'rice')

# print(ddd)

import sqlite3

db_url = 'data.db'

def main(crop):
    db = sqlite3.connect(db_url)
    cursor = db.cursor()
    # data = getdata(sensorData)
    cursor.execute('select * from temp_sensor_data')   #pass tuple 
    # db.commit()
    data = cursor.fetchall()

    return final_mod(data, crop)
    # return 0

# print(main('rice'))














